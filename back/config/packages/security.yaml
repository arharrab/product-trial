security:
  password_hashers:
    App\Entity\User:
      algorithm: auto

  providers:
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    login:
      pattern: ^/token
      stateless: true
      json_login:
        check_path: /token
        username_path: email
        password_path: password
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure

    api:
      pattern: ^/api
      stateless: true
      jwt: ~

    main:
      lazy: true
      provider: app_user_provider
      pattern: ^/(?!api)
      custom_authenticator: App\Security\LoginFormAuthenticator
      form_login:
        login_path: app_login
        check_path: app_login
        enable_csrf: true
      entry_point: App\Security\LoginFormAuthenticator
      logout:
        path: app_logout
        invalidate_session: true
        target: /
      remember_me:
        secret: '%kernel.secret%'
        lifetime: 604800
        path: /
        always_remember_me: true

  access_control:
    - { path: ^/api/login, roles: PUBLIC_ACCESS }
    - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }
    # HTML
    - { path: ^/login, roles: PUBLIC_ACCESS }
    - { path: ^/products/\d+/edit, roles: ROLE_USER }
    - { path: ^/products/new, roles: ROLE_USER }
    - { path: ^/products/\d+/delete, roles: ROLE_USER }
    - { path: ^/products, methods: [ POST, PUT, DELETE ], roles: ROLE_USER }


when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
